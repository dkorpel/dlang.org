Ddoc

$(CHANGELOG_NAV_INJECT)

$(VERSION Apr 01, 2025, =================================================,

$(CHANGELOG_HEADER_STATISTICS
$(VER) comes with 41 major changes and 129 fixed Bugzilla issues, and 56 fixed GitHub issues.
        A huge thanks goes to the
        $(LINK2 #contributors, 78 contributors)
        who made $(VER) possible.)

$(BUGSTITLE_TEXT_HEADER Compiler changes,

$(LI $(RELATIVE_LINK2 dmd.auto-ref-local,Storage classes `ref` and `auto ref` can now be applied to local, static, extern, and global variables))
$(LI $(RELATIVE_LINK2 dmd.auto-ref-put-adjacent,Keywords `auto` and `ref` must be adjacent))
$(LI $(RELATIVE_LINK2 dmd.default-align,The `align` attribute now allows specifying `default` explicitly))
$(LI $(RELATIVE_LINK2 dmd.delete-keyword,Remove `delete` as a keyword))
$(LI $(RELATIVE_LINK2 dmd.deprecation-case,Case fallthough for multivalued cases is an error now))
$(LI $(RELATIVE_LINK2 dmd.deprecation-dtor-fields,An error is now given for constructors when a field's destructor has stricter attributes))
$(LI $(RELATIVE_LINK2 dmd.deprecation-noop-assignment,Initializing a field with itself has been deprecated))
$(LI $(RELATIVE_LINK2 dmd.deprecation-pointer-subtract,An error is now given for subtracting pointers of different types))
$(LI $(RELATIVE_LINK2 dmd.deprecation-throwing-contracts,An error is now issued for `in`/`out` contracts of `nothrow` functions that may throw))
$(LI $(RELATIVE_LINK2 dmd.deprecation-typesafe-variadic-class,Typesafe variadic class parameters have been deprecated))
$(LI $(RELATIVE_LINK2 dmd.deprecation-version-debug-number,Integers in `debug` or `version` statements have been removed from the language))
$(LI $(RELATIVE_LINK2 dmd.error-messages,Many error messages have changed))
$(LI $(RELATIVE_LINK2 dmd.extern-std-cpp23,The compiler now accepts `-extern-std=c++23`))
$(LI $(RELATIVE_LINK2 dmd.ftime-trace,Build time profiling has been added to DMD))
$(LI $(RELATIVE_LINK2 dmd.getBitfieldInfo,New traits `getBitfieldOffset` and `getBitfieldWidth` for built-in bitfields))
$(LI $(RELATIVE_LINK2 dmd.import-c-i,Using the compiler flag `-i` will now properly pick up C source files))
$(LI $(RELATIVE_LINK2 dmd.importc-pragma-stc,A pragma for ImportC allows to set `nothrow`, `@nogc` or `pure`))
$(LI $(RELATIVE_LINK2 dmd.mixin-assign,Mixin templates can now use assignment syntax))
$(LI $(RELATIVE_LINK2 dmd.obj_extensions,Object file extensions `.o` and `.obj` are now accepted on all platforms))
$(LI $(RELATIVE_LINK2 dmd.objc-improvements,Objective-C selectors are now automatically generated when not specified with `@selector`.))
$(LI $(RELATIVE_LINK2 dmd.oq-compiler-switch,New compiler switch `-oq` for DMD))
$(LI $(RELATIVE_LINK2 dmd.placementNew,Added Placement New Expression))
$(LI $(RELATIVE_LINK2 dmd.postfix-this-attributes,Postfix type qualifier method attributes for `-H` and `-D`))
$(LI $(RELATIVE_LINK2 dmd.remove-samples,The folder *samples* has been removed from DMD installations))
$(LI $(RELATIVE_LINK2 dmd.rvalue,New keyword `__rvalue`))
$(LI $(RELATIVE_LINK2 dmd.safer,Add `-preview=safer` switch for safety checking on unattributed functions))
$(LI $(RELATIVE_LINK2 dmd.shortened-method-constructor,Shortened method syntax can now be used in constructors))

)

$(BUGSTITLE_TEXT_HEADER Runtime changes,

$(LI $(RELATIVE_LINK2 druntime.bcrypt,Add Windows BCrypt bindings under `core.sys.windows.bcrypt`))
$(LI $(RELATIVE_LINK2 druntime.criticalRegionLock,Remove `criticalRegionLock`))
$(LI $(RELATIVE_LINK2 druntime.expect-trap,Adds `expect`, `likely`, `unlikely`, and `trap` to `core.builtins`))
$(LI $(RELATIVE_LINK2 druntime.segfault-message,New segfault handler showing backtraces for null access / call stack overflow on linux))

)

$(BUGSTITLE_TEXT_HEADER Library changes,

$(LI $(RELATIVE_LINK2 bit-cast,Added `std.conv.bitCast`))
$(LI $(RELATIVE_LINK2 formatted_read_tuple_return,Extend the functionality of formattedRead to permit a std.file.slurp like execution.))
$(LI $(RELATIVE_LINK2 fromhexstring,Added fromHexString and fromHexStringAsRange functions to std.digest.))
$(LI $(RELATIVE_LINK2 odbc-4,ODBC Bindings in `etc.c.odbc` have been updated to ODBC 4.0.))
$(LI $(RELATIVE_LINK2 pop-grapheme,Added popGrapheme function to std.uni.))
$(LI $(RELATIVE_LINK2 readfln,Added `readfln` and `File.readfln` to `std.stdio`))
$(LI $(RELATIVE_LINK2 shared-allocator-list,Added the `SharedAllocatorList`, as the thread-safe version of the regular `AllocatorList`.))
$(LI $(RELATIVE_LINK2 sumtype_procedural_api,New procedural API for `std.sumtype`))
$(LI $(RELATIVE_LINK2 unicode-16,std.uni has been upgraded from Unicode 15.1.0 to 16.0.0))

)

$(BUGSTITLE_TEXT_HEADER Dub changes,

$(LI $(RELATIVE_LINK2 fix-cimport-paths,Fix issue where cImportPaths wasn't working with dmd and ldc))

)

$(CHANGELOG_SEP_HEADER_TEXT_NONEMPTY)

$(CHANGELOG_SEP_HEADER_TEXT)

$(BUGSTITLE_TEXT_BODY Compiler changes,

$(LI $(LNAME2 dmd.auto-ref-local,Storage classes `ref` and `auto ref` can now be applied to local, static, extern, and global variables)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.auto-ref-local.dd)
$(P
For example, one can now write:
)
```
struct S { int a; }

void main()
{
    S s;
    ref int r = s.a;
    r = 3;
    assert(s.a == 3);

    auto ref x = 0;
    auto ref y = x;
    static assert(!__traits(isRef, x));
    static assert( __traits(isRef, y));
}
```
)

$(LI $(LNAME2 dmd.auto-ref-put-adjacent,Keywords `auto` and `ref` must be adjacent)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.auto-ref-put-adjacent.dd)
$(P
It's now deprecated to declare `auto ref` parameters without putting those two keywords next to each other.
This way it's clear that `auto ref` semantics are intended, rather than `ref` and `auto` semantics separately.
For the newly introduced $(RELATIVE_LINK2 dmd.reflocal, `ref` local / global variables), it's an error immediately.
)

---
void t()(ref const auto int x) // Deprecation
{
    ref auto y = x; // Error
}

// Correction:
void t()(auto ref const int x)
{
    auto ref y = x;
}
---
)

$(LI $(LNAME2 dmd.default-align,The `align` attribute now allows specifying `default` explicitly)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.default-align.dd)
$(P
A lone `align` sets the alignment to the typeâ€™s default.
To be more explicit, `align(default)` does the same.
)

```
struct S
{
    align(4)
    {
        byte x;
        align(default) long y;
        long z;
    }
}

void main()
{
    pragma(msg, S.x.alignof); // 4
    pragma(msg, S.y.alignof); // 8
    pragma(msg, S.z.alignof); // 4
}
```
)

$(LI $(LNAME2 dmd.delete-keyword,Remove `delete` as a keyword)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.delete-keyword.dd)
$(P
After being superseded by `destroy()`, deprecated, and turned into an error, `delete` can now be used as an identifier:
)

---
enum Action
{
    add, delete
}

void delete(T)(T obj)
{

}
---
)

$(LI $(LNAME2 dmd.deprecation-case,Case fallthough for multivalued cases is an error now)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.deprecation-case.dd)
$(P
This used to give a deprecation and now gives an error:
)
```
int i;
switch (0)
{
    case 0, 1: i = 20;
    default: assert(0); // Error: switch case fallthrough - use 'goto default;' if intended
}

switch (0)
{
    default:
    case 0, 1: i = 20;
    case 2, 3: i = 30; // Error: switch case fallthrough - use 'goto case;' if intended
}
```
)

$(LI $(LNAME2 dmd.deprecation-dtor-fields,An error is now given for constructors when a field's destructor has stricter attributes)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.deprecation-dtor-fields.dd)
```
struct HasDtor
{
    ~this() {}
}

struct Pure
{
    HasDtor member;
    this(int) pure {} // Error: `this` has stricter attributes than its destructor (`pure`)
}

struct Nothrow
{
    HasDtor member;
    this(int) nothrow {} // Error: `this` has stricter attributes than its destructor (`nothrow`)
}

struct NoGC
{
    HasDtor member;
    this(int) @nogc {} // Error: `this` has stricter attributes than its destructor (`@nogc`)
}

struct Safe
{
    HasDtor member;
    this(int) @safe {} // Error: `this` has stricter attributes than its destructor (`@safe`)
}
```
)

$(LI $(LNAME2 dmd.deprecation-noop-assignment,Initializing a field with itself has been deprecated)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.deprecation-noop-assignment.dd)
$(P
This is to prevent a common mistake when a field and a parameter ought to have the same name,
but one is misspelled where it's declared:
)

---
struct S
{
    int field;

    this(int feild) // supposed to be: this(int field)
    {
        this.field = field; // equal to this.field = this.field
    }
}
---
)

$(LI $(LNAME2 dmd.deprecation-pointer-subtract,An error is now given for subtracting pointers of different types)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.deprecation-pointer-subtract.dd)
$(P
The following code now gives errors:
)
```
static assert(cast(void*)8 - cast(int*) 0 == 2L);
static assert(cast(int*) 8 - cast(void*)0 == 8L);
void test()
{
     auto foo = (ushort*).init - (ubyte*).init;
}
```
)

$(LI $(LNAME2 dmd.deprecation-throwing-contracts,An error is now issued for `in`/`out` contracts of `nothrow` functions that may throw)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.deprecation-throwing-contracts.dd)
$(P
This used to issue a deprecation, it is now an error:
)
```
void test() nothrow
in
{
    throw new Exception(null); // Error: `in` contract may throw but function is marked as `nothrow`
}
out
{
    throw new Exception(null); // Error: `out` contract may throw but function is marked as `nothrow`
}
do
{
}
```
)

$(LI $(LNAME2 dmd.deprecation-typesafe-variadic-class,Typesafe variadic class parameters have been deprecated)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.deprecation-typesafe-variadic-class.dd)
$(P
This obscure feature allowed a limited form of implicit construction:
)

---
void check(bool x, Exception e...)
{
    if (!x)
        throw e;
}

void main(string[] args)
{
    check(args.length > 1, "missing argument");
}
---

$(P
However, few uses of this feature have been found, and one project was actually mistakenly using it instead of the more common Typesafe variadic array parameter.
Considering D doesn't support implicit construction and already has a confusing amount of different variadic parameter forms, it was decided to remove this feature.
)

$(P
As a corrective action, either call the constructor in the callee:
)

---
void check(string msg)
{
    if (!x)
        throw new Exception(msg);
}
---

$(P
Or let the caller construct the class instance:
)

---
void check(bool x, Exception e);

void main(string[] args)
{
    check(args.length > 1, new Exception("missing argument"));
}
---
)

$(LI $(LNAME2 dmd.deprecation-version-debug-number,Integers in `debug` or `version` statements have been removed from the language)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.deprecation-version-debug-number.dd)
$(P
These were deprecated in 2.101.
Use `-debug=identifier` and `-version=identifier` instead for versions set on the command line,
and likewise `version = identifier;` and `debug = identifier;` for versions set in code at global scope.
)
)

$(LI $(LNAME2 dmd.error-messages,Many error messages have changed)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.error-messages.dd)
$(P
Some changes have been made without being associated to a reported issue:
)

$(P
Error messages for `@safe` violations now consistently mention they are related to `@safe` functions (or default functions with `-preview=safer`).
In general, function attributes that failed to infer have a more compact error message:
)

$(P
Before:
$(CONSOLE
app.d(8): Error: function `attributediagnostic_nothrow.gc1` is not `nothrow`
app.d(2):        which wasn't inferred `nothrow` because of:
app.d(2):        `object.Exception` is thrown but not caught
)
)

$(P
After:
$(CONSOLE
app.d(8): Error: function `attributediagnostic_nothrow.gc1` is not `nothrow`
app.d(2):        and `object.Exception` being thrown but not caught makes it fail to infer `nothrow`
)
)

$(P
Function literals are now referred to by their (truncated) function body, instead of the internal `__lambda` name.
)

---
/*
BEFORE:

../test/test_.d(3): Error: function literal `__lambda1()` is not callable using argument types `(int)`
    (() => 42)(1);
              ^
AFTER:

../test/test_.d(3): Error: function literal `() => 42` is not callable using argument types `(int)`
    (() => 42)(1);
              ^
*/
---

$(P
Match levels are now mentioned on ambiguous overloads: [#20637](https://github.com/dlang/dmd/pull/20637)
)

$(P
Before:
$(CONSOLE
Error: `app.bar` called with argument types `(string)` matches both:
)
)

$(P
After:
$(CONSOLE
Error: `app.bar` called with argument types `(string)` matches multiple overloads after implicit conversions:
)
)

$(P
Error messages related to operator overloading have been improved.
When the related template functions (`opUnary`, `opBinary`, `opBinaryRight`, `opOpAssign`, `opIndex`, `opSlice`)
are missing, a suggestion to implement them is given.
)

$(P
When they do exist but fail to instantiate, the error from instantiation is shown.
There's no longer a need to manually e.g. rewrite `s + 1` to `s.opBinary!"+"(1)` to diagnose the error.
)

---
struct S {}

void main()
{
    S s;
    const x = s[3 .. "4"];
}
---

$(P
Before:
$(CONSOLE
app.d(6): Error: no `[]` operator overload for type `S`
)
)

$(P
After:
$(CONSOLE
app.d(6): Error: no `[3.."4"]` operator overload for type `S`
app.d(1):        perhaps define `auto opSlice(int lower, string upper) {}` for `app.S`
)
)

---
struct Str {}

struct Number
{
    int x;
    int opBinary(string op : "+")(int rhs) => this.x + x;
}

void f(Str str, Number number)
{
    const s = str ~ "hey";
    const n = number + "oops";
}
---

$(P
Before:
$(CONSOLE
app.d(12): Error: incompatible types for `(str) ~ ("hey")`: `Str` and `string`
    const s = str ~ "hey";
              ^
app.d(13): Error: incompatible types for `(number) + ("oops")`: `Number` and `string`
    const n = number + "oops";
)
)

$(P
After:
$(CONSOLE
app.d(12): Error: operator `~` is not defined for type `Str`
    const s = str ~ "hey";
              ^
app.d(2):        perhaps overload the operator with `auto opBinary(string op : "~")(string rhs) {}`
struct Str {}
^
app.d(13): Error: function `test_.Number.opBinary!"+".opBinary(int rhs)` is not callable using argument types `(string)`
    const n = number + "oops";
              ^
app.d(13):        cannot pass argument `"oops"` of type `string` to parameter `int rhs`
app.d(7):        `opBinary` defined here
    int opBinary(string op : "+")(int rhs) => this.x + x;
        ^
)
)

$(P
Furthermore:
)

$(P
- D1 operator overloading functions (`opAdd`, `opDot`) are completely removed and no longer mentioned in error messages specifically.
- Class allocators (`auto new() {}`) are not only a semantic error, but no longer parse.
)
)

$(LI $(LNAME2 dmd.extern-std-cpp23,The compiler now accepts `-extern-std=c++23`)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.extern-std-cpp23.dd)
$(P
The compiler now accepts c++23 as a supported standard for `-extern-std=`.
Currently this only changes the value of `__traits(getTargetInfo, "cppStd")`.
)
)

$(LI $(LNAME2 dmd.ftime-trace,Build time profiling has been added to DMD)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.ftime-trace.dd)
$(P
The `-ftime-trace` switch that the LDC compiler already has, is now also available in dmd.
It can be used to figure out which parts of your code take the longest to compile, so you can optimize your build times.
)

$(P
$(CONSOLE
dmd -ftime-trace app.d
)
)

$(P
This will output `app.o.time-trace`.
)

$(P
A different output file can be selected with `-ftime-trace-file=trace.json`.
)

$(P
The output is in Google Chrome's profiler format, which can be viewed in an interactive viewer like [ui.perfetto.dev](https://ui.perfetto.dev).
)

$(P
See also the YouTube tutorial [*Easily Reduce Build Times by Profiling the D Compiler*](https://www.youtube.com/watch?v=b8wZqU5t9vs).
)
)

$(LI $(LNAME2 dmd.getBitfieldInfo,New traits `getBitfieldOffset` and `getBitfieldWidth` for built-in bitfields)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.getBitfieldInfo.dd)
$(P
This completes the introspection capabilities of built-in bitfields. For example:
)

---
struct S
{
    int a,b;
    int :2, c:3;
}

static assert(__traits(getBitfieldOffset, S.b) == 0);
static assert(__traits(getBitfieldOffset, S.c) == 2);
static assert(__traits(getBitfieldWidth, S.b) == 32);
static assert(__traits(getBitfieldWidth, S.c) == 3);
---
)

$(LI $(LNAME2 dmd.import-c-i,Using the compiler flag `-i` will now properly pick up C source files)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.import-c-i.dd)
$(P
Previously, you needed to manually include `*.c` source files, it now works just like with D files.
)
)

$(LI $(LNAME2 dmd.importc-pragma-stc,A pragma for ImportC allows to set `nothrow`, `@nogc` or `pure`)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.importc-pragma-stc.dd)
$(P
The following new pragma for ImportC allows to set default storage
classes for function declarations:
)
```c
#pragma attribute(push, [storage classes...])
```
$(P
The storage classes `nothrow`, `nogc` and `pure` are supported.
Unrecognized attributes are ignored.
Enabling a default storage class affects all function declarations
after the pragma until it is disabled with another pragma.
Declarations in includes are also affected.
The changed storage classes are pushed on a stack. The last change can
be undone with the following pragma.
The following example
enables `@nogc` and `nothrow` for a library:
)

```c
#pragma attribute(push, nogc, nothrow)
#include <somelibrary.h>
#pragma attribute(pop)
```

$(P
This can also disable multiple default storage classes at the same time,
if they were enabled with a single `#pragma attribute(push, ...)` directive.
)
)

$(LI $(LNAME2 dmd.mixin-assign,Mixin templates can now use assignment syntax)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.mixin-assign.dd)
$(P
Previously, giving a name to a mixed-in mixin template instance required putting the name at the end.
Now, it can also go in front of the instantiation using assignment syntax.
)
---
mixin MyMixinTemplate!(Args) myName; // old style
mixin myName = MyMixinTemplate!(Args); // new style
---
)

$(LI $(LNAME2 dmd.obj_extensions,Object file extensions `.o` and `.obj` are now accepted on all platforms)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.obj_extensions.dd)
$(P
Accepting `.o` and `.obj` file extensions on all platforms makes DMD behave
like Clang and other modern compilers. There is no point in
discarding `*.o` or `*.obj` depending on the current operating system, as both extensions
unambiguously denote object file.
)
)

$(LI $(LNAME2 dmd.objc-improvements,Objective-C selectors are now automatically generated when not specified with `@selector`.)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.objc-improvements.dd)
$(P
Additionally, the Objective-C selector generation rules have changed, following these steps:
1. Functions marked with `@property` will generate `setXYZ:` for the setters.
2. For property functions with names starting with `is`, that prefix will be stripped off in the setter.
3. Selector generation now uses the names of the function parameters instead of their D-mangled types.
)

$(P
Selectors may still be specified with the `@selector` UDA, in which case it takes precedence over the
automatically generated selectors.
)

$(P
These new rules apply both for `extern` and non-`extern` Objective-C classes and protocols.
)

---
extern(Objective-C)
extern class NSObject {
    static NSObject alloc(); // Generates as `alloc`
    NSObject init(); // Generates as `init`
}

extern(Objective-C)
class Fox : NSObject {
    bool fluffy;

    @property bool isFluffy() => fluffy; // `isFluffy`
    @property void isFluffy(bool value) { fluffy = value; } // `setFluffy:`

    void yip(int a) @selector("bark:") { // `bark:`
        // ...
    }

    void doSomething(int a, int b, int c) { // `doSomething:b:c:`
        // ...
    }
}
---

$(P
These changes should not break any existing code because the automatic selector generation
was not present before. And automatic selector generation only applies to `extern(Objective-C)` methods.
)
)

$(LI $(LNAME2 dmd.oq-compiler-switch,New compiler switch `-oq` for DMD)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.oq-compiler-switch.dd)
$(P
The switch gives fully qualified names to object files, preventing name conflicts when using the switch `-od`
while compiling multiple modules with the same name, but inside different packages.
The switch already existed in LDC, but is now in dmd as well.
)

$(P
Example:
)

$(P
$(CONSOLE
dmd -c -oq -od=. app.d util/app.d misc/app.d
)
)

$(P
This will output `app.obj`, `util.app.obj`, and `misc.app.obj`, instead of just `app.obj`.
)

$(P
The switch `-oq` also applies to other outputs, such as Ddoc (`-D -Dd=.`) and `.di` header generation (`-H -Hd=.`).
)
)

$(LI $(LNAME2 dmd.placementNew,Added Placement New Expression)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.placementNew.dd)
$(P
Placement `new` explicitly provides the storage for `new` expression to initialize
with the newly created value, rather than using the GC.
)

---
struct S
{
    float d;
    int i;
    char c;
}

void main() @system @nogc
{
    S s;
    S* p = new (s) S(3.14, 42, 'X'); // place new object into s
    assert(p.i == 42 && p.c == 'X');
}
---
)

$(LI $(LNAME2 dmd.postfix-this-attributes,Postfix type qualifier method attributes for `-H` and `-D`)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.postfix-this-attributes.dd)
$(P
The `.di` interface file generation and Ddoc output will now have type qualifier
attributes placed after the parameter list for methods (and constructors).
This avoids confusion with the return type.
)

---
struct S
{
    const int f(); // before
    int f() const; // now
}
---
)

$(LI $(LNAME2 dmd.remove-samples,The folder *samples* has been removed from DMD installations)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.remove-samples.dd)
$(P
Every DMD release has included a folder with small D code examples.
These examples are quite old, and not a good representation of modern D.
They're also hard to discover, since D compilers are often installed through an installer or package manager.
)

$(P
Since there are better resources available online nowadays, these samples have
been moved to the [undeaD](https://github.com/dlang/undeaD) repository.
)
)

$(LI $(LNAME2 dmd.rvalue,New keyword `__rvalue`)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.rvalue.dd)
$(P
The newly added primary expression of the form `__rvalue(expression)`
evaluates to `expression`, except that it is treated as an rvalue,
even if would be an lvalue otherwise.
)

$(P
Overloads on `ref`:
)
```
foo(    S s); // selected if the argument is an rvalue
foo(ref S s); // selected if the argument is an lvalue

S s;
S bar();
...
foo(s); // selects foo(ref S)
foo(bar()); // selects foo(S)
```
$(P
With this change:
)
```
foo(__rvalue(s)); // selects foo(S)
```
$(P
This also applies to constructors and assignments, meaning move constructors and
move assignments are enabled. Moving instead of copying can be much more resource
efficient, as, say, a string can be moved rather than copied/deleted.
)

$(P
A moved object will still be destructed, so take that into account when moving
a field - set it to a benign value that can be destructed.
)

$(P
`__rvalue` may also be used as an attribute on a function which returns by ref
to declare that the result should be treated as an rvalue at the callsite:
)
```
ref T move(T)(return ref T source) __rvalue
{
    return source;
}

S s;
S t = move(s); // call expression rewritten as: S t = __rvalue(move(s))
```
$(P
This is used as an internal tool to implement library primitives such as `move` and `forward`.
)
)

$(LI $(LNAME2 dmd.safer,Add `-preview=safer` switch for safety checking on unattributed functions)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.safer.dd)
$(P
All the checks currently enabled in `@safe` code, that are easily fixed (as in
the fix is constrained to the function), will be enabled in `-preview=safer` code.
)

$(P
Code not easily fixed, such as calls to `@system` or unattributed functions, will
be allowed as before.
)

---
void f();
@system void g();

void main()
{
    int* p;
    p++; // Error, pointer arithmetic
    f(); // allowed
    g(); // allowed
}
---

$(P
For more information, see [this document](https://github.com/WalterBright/documents/blob/38f0a846726b571f8108f6e63e5e217b91421c86/safer.md).
)
)

$(LI $(LNAME2 dmd.shortened-method-constructor,Shortened method syntax can now be used in constructors)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.shortened-method-constructor.dd)
$(P
This used to raise an error (cannot return expression from constructor), but is now supported:
)

---
struct Number
{
    int x;

    void vf(int);
    this(int x) => vf(x);
    this(float x) => this(cast(int) x);
}
---

$(P
The expression body must be a `this`/`super` call or have type `void`.
)

$(P
Postblits and destructors already supported shortened method syntax because they return `void`.
)
)


)

$(BUGSTITLE_TEXT_BODY Runtime changes,

$(LI $(LNAME2 druntime.bcrypt,Add Windows BCrypt bindings under `core.sys.windows.bcrypt`)
$(CHANGELOG_SOURCE_FILE dmd, changelog/druntime.bcrypt.dd)
$(P
Adds full [BCrypt API](https://learn.microsoft.com/en-us/windows/win32/api/bcrypt/) bindings
to the Windows-specific system bindings.
)

$(P
The Windows-specific bindings under `core.sys.windows.sdkddkver` and `core.sys.windows.w32api`
have also been updated in order to facilitate the creation of the BCrypt bindings.
)
)

$(LI $(LNAME2 druntime.criticalRegionLock,Remove `criticalRegionLock`)
$(CHANGELOG_SOURCE_FILE dmd, changelog/druntime.criticalRegionLock.dd)
$(P
The `criticalRegionLock` feature suffer from a serious design flaw: $(LINK https://issues.dlang.org/show_bug.cgi?id=24741)
)

$(P
It turns out it is not used, so rather than fixing the flaw, the feature was removed.
)
)

$(LI $(LNAME2 druntime.expect-trap,Adds `expect`, `likely`, `unlikely`, and `trap` to `core.builtins`)
$(CHANGELOG_SOURCE_FILE dmd, changelog/druntime.expect-trap.dd)
$(P
Adds the functions `expect` and `likely`/`unlikely` for branch and value hints for the LDC/GDC compilers.
DMD ignores these hints.
)

$(P
Adds the function `trap` to be lowered to the target-dependent trap instruction.
If the target does not have a trap instruction, this intrinsic will be lowered to a call of the `abort` function.
)
)

$(LI $(LNAME2 druntime.segfault-message,New segfault handler showing backtraces for null access / call stack overflow on linux)
$(CHANGELOG_SOURCE_FILE dmd, changelog/druntime.segfault-message.dd)
$(P
While buffer overflows are usually caught by array bounds checks, there are still other situations where a segmentation fault occurs in D programs:
)

$(P
- `null` pointer dereference
- Corrupted or dangling pointer dereference in `@system` code
- Call stack overflow (infinite recursion)
)

$(P
These result in an uninformative runtime error such as:
)

$(P
$(CONSOLE
[1]    37856 segmentation fault (core dumped)  ./app
)
)

$(P
In order to find the cause of the error, the program needs to be run again in a debugger like GDB.
)

$(P
There is the `registerMemoryErrorHandler` function in `etc.linux.memoryerror`, which catches `SIGSEGV` signals and transforms them into a thrown `InvalidPointerError`, providing a better message.
However, it doesn't work on call stack overflow, because it uses stack memory itself, so the segfault handler segfaults.
It also relies on inline assembly, limiting it to the x86 architecture.
)

$(P
A new function `registerMemoryAssertHandler` has been introduced, which does handle stack overflow by setting up an [altstack](https://man7.org/linux/man-pages/man2/sigaltstack.2.html).
It uses `assert(0)` instead of throwing an `Error` object, so the result corresponds to the chosen `-checkaction` setting.
)

$(P
Example:
)

---
void main()
{
    version (linux)
    {
        import etc.linux.memoryerror;
        registerMemoryAssertHandler();
    }
    int* p = null;
    int* q = cast(int*) 0xDEADBEEF;

    // int a = *p; // segmentation fault: null pointer read/write operation
    // int b = *q; // segmentation fault: invalid pointer read/write operation
    recurse();     // segmentation fault: call stack overflow
}

void recurse()
{
    recurse();
}
---

$(P
Output with `dmd -g -run app.d`:
)

$(P
$(CONSOLE
core.exception.AssertError@src/etc/linux/memoryerror.d(82): segmentation fault: call stack overflow
$(NDASH)$(NDASH)$(NDASH)$(NDASH)$(NDASH)$(NDASH)$(NDASH)$(NDASH)$(NDASH)$(NDASH)
src/core/exception.d:587 onAssertErrorMsg [0x58e270d2802d]
src/core/exception.d:803 _d_assert_msg [0x58e270d1fb64]
src/etc/linux/memoryerror.d:82 _d_handleSignalAssert [0x58e270d1f48d]
??:? [0x7004139e876f]
./app.d:16 void scratch.recurse() [0x58e270d1d757]
./app.d:18 void scratch.recurse() [0x58e270d1d75c]
./app.d:18 void scratch.recurse() [0x58e270d1d75c]
./app.d:18 void scratch.recurse() [0x58e270d1d75c]
./app.d:18 void scratch.recurse() [0x58e270d1d75c]
...
...
...
)
)
)


)

$(BUGSTITLE_TEXT_BODY Library changes,

$(LI $(LNAME2 bit-cast,Added `std.conv.bitCast`)
$(CHANGELOG_SOURCE_FILE phobos, changelog/bit-cast.dd)
$(P
This convenience function allows reinterpreting casts to be written in a more
readable way.
)

---
uint n = 0xDEADBEEF;

// Before
writeln("Bytes of n are: ", *cast(const ubyte[4]*) &n);

// After
writeln("Bytes of n are: ", n.bitCast!(const ubyte[4]));
---
)

$(LI $(LNAME2 formatted_read_tuple_return,Extend the functionality of formattedRead to permit a std.file.slurp like execution.)
$(CHANGELOG_SOURCE_FILE phobos, changelog/formatted_read_tuple_return.dd)
$(P
Template argument types can now be passed to formattedRead along with a
format string to parse and read the input range as a Tuple of those arguments.
All arguments must be read successfully, otherwise, and unlike std.file.slurp
which has non exhaustive option for partial reads, it'll throw a std.format.FormatException.
)

---
import std.exception : assertThrown;
import std.format : FormatException;
import std.typecons : tuple;

@safe pure unittest
{
    auto complete = "hello!34.5:124".formattedRead!(string, double, int)("%s!%s:%s");
    assert(complete == tuple("hello", 34.5, 124));

    assertThrown!FormatException("hello!34.5:".formattedRead!(string, double, int)("%s!%s:%s"));
}

/// The format string can be checked at compile-time:
@safe pure unittest
{
    auto expected = tuple("hello", 124, 34.5);
    auto result = "hello!124:34.5".formattedRead!("%s!%s:%s", string, int, double);
    assert(result == expected);

    assertThrown!FormatException("hello!34.5:".formattedRead!("%s!%s:%s", string, double, int));
}
---
)

$(LI $(LNAME2 fromhexstring,Added fromHexString and fromHexStringAsRange functions to std.digest.)
$(CHANGELOG_SOURCE_FILE phobos, changelog/fromhexstring.dd)
$(P
This new function enables the converion of a hex string to a range of bytes.
Unlike the template $(REF hexString, std, conv) that was designed to supersede
a language feature, this function is usable with runtime input.
)

$(P
The `std.conv` module lacks facilities to conveniently transform the input
to a series of bytes directly. Both $(REF parse, std, conv) and $(REF to, std,
conv) can only handle the conversion for a single value of the requested target
integer type. Furthermore, said functions would allocate a new buffer for the
result, while `fromHexStringAsRange` operates lazily by implementing a forward
range.
)

$(P
For further convenience, a validation function $(REF isHexString, std, digest)
was added as well.
)
)

$(LI $(LNAME2 odbc-4,ODBC Bindings in `etc.c.odbc` have been updated to ODBC 4.0.)
$(CHANGELOG_SOURCE_FILE phobos, changelog/odbc-4.dd)
$(P
ODBC 4.0, via these new bindings, adds the following functionality:
)

$(P
1. Support for semi-structured data, such as JSON.
2. Collection valued columns.
3. Web-based Authorization flows.
)

$(P
A full list of new features can be found here: https://github.com/Microsoft/ODBC-Specification/blob/master/ODBC%204.0.md
)

$(P
Additionally these modules add support for 64-bit ODBC interfaces.
)
)

$(LI $(LNAME2 pop-grapheme,Added popGrapheme function to std.uni.)
$(CHANGELOG_SOURCE_FILE phobos, changelog/pop-grapheme.dd)
$(P
The new function is a cross between the existing $(REF graphemeStride, std,
uni) and $(REF decodeGrapheme, std, uni) functions. The new function both
supports `@safe pure nothrow @nogc` like `graphemeStride` does as long as you
don't rely on autodecoding (side node: `@nogc` support for `graphemeStride`
added in this release), and works with any non-array ranges just like
`decodeGrapheme` does.
)

$(P
Example:
)

-------
import std.uni;

// Two Union Jacks of the Great Britain in each
string s = "\U0001F1EC\U0001F1E7\U0001F1EC\U0001F1E7";
wstring ws = "\U0001F1EC\U0001F1E7\U0001F1EC\U0001F1E7";
dstring ds = "\U0001F1EC\U0001F1E7\U0001F1EC\U0001F1E7";

// String pop length in code units, not points.
assert(s.popGrapheme() == 8);
assert(ws.popGrapheme() == 4);
assert(ds.popGrapheme() == 2);

assert(s == "\U0001F1EC\U0001F1E7");
assert(ws == "\U0001F1EC\U0001F1E7");
assert(ds == "\U0001F1EC\U0001F1E7");

import std.algorithm.comparison : equal;
import std.algorithm.iteration : filter;

// Also works for non-random access ranges as long as the
// character type is 32-bit.
auto testPiece = "\r\nhello!"d.filter!(x => !x.isAlpha);
// Windows-style line ending is two code point in a single grapheme.
assert(testPiece.popGrapheme() == 2);
assert(testPiece.equal("!"d));
-------
)

$(LI $(LNAME2 readfln,Added `readfln` and `File.readfln` to `std.stdio`)
$(CHANGELOG_SOURCE_FILE phobos, changelog/readfln.dd)
$(P
These functions read a single line of input and parse it using a format string.
Unlike `readf`, they will not accidentally read multiple lines if the user
forgets to include a line terminator in the format stringâ€”a common mistake for
beginners.
)
)

$(LI $(LNAME2 shared-allocator-list,Added the `SharedAllocatorList`, as the thread-safe version of the regular `AllocatorList`.)
$(CHANGELOG_SOURCE_FILE phobos, changelog/shared-allocator-list.dd)
$(P
The new $(REF SharedAllocatorList, std,experimental,allocator,building_blocks,allocator_list) has the same semantics as the regular `AllocatorList`.
Just as the regular `AllocatorList`, if the `BookkeepingAllocator` is `NullAllocator`, the `SharedAllocatorList` will switch to `ouroboros` mode,
allocationg memory for its own metadata.
)

---
SharedAllocatorList!((n) => SharedAscendingPageAllocator(max(n, numPages * pageSize)), NullAllocator) a;
auto b = a.allocate(100);
assert(b.length == 100);

assert(a.deallocate(b));
---
)

$(LI $(LNAME2 sumtype_procedural_api,New procedural API for `std.sumtype`)
$(CHANGELOG_SOURCE_FILE phobos, changelog/sumtype_procedural_api.dd)
$(P
`std.sumtype` has three new convenience functions for querying and retrieving
the value of a `SumType` object.
)

$(P
* `has!T` returns `true` if the `SumType` object has a value of type `T`.
* `get!T` returns the value if its type is `T`, or asserts if it is not.
* `tryGet!T` returns the value if its type is `T`, or throws an exception if it
   is not.
)

$(P
These functions make it easier to write code using `SumType` in a procedural
style, as opposed to the functional style encouraged by `match`.
)

$(P
Example:
)

---
import std.sumtype;
import std.stdio;

SumType!(string, double) example = "hello";

if (example.has!string)
{
    writeln("string: ", example.get!string);
}
else if (example.has!double)
{
    writeln("double: ", example.get!double);
}

try
{
    writeln("double: ", example.tryGet!double);
}
catch (MatchException e)
{
    writeln("Couldn't get a double.");
}
---
)

$(LI $(LNAME2 unicode-16,std.uni has been upgraded from Unicode 15.1.0 to 16.0.0)
$(CHANGELOG_SOURCE_FILE phobos, changelog/unicode-16.dd)
$(P
This Unicode update was released September 10, 2024, and adds new blocks with characters.
See: https://www.unicode.org/versions/Unicode16.0.0/
)

```
import std;

void main()
{
    const alphaCount = iota(0, dchar.max).filter!(std.uni.isAlpha).walkLength;
    writeln(alphaCount);
    // formerly: 138387
    // now:      142759
}
```
)


)

$(BUGSTITLE_TEXT_BODY Dub changes,

$(LI $(LNAME2 fix-cimport-paths,Fix issue where cImportPaths wasn't working with dmd and ldc)
$(CHANGELOG_SOURCE_FILE dub, changelog/fix-cimport-paths.dd)
$(P
dub was passing -I<import path> instead of -P-I<import path> as is required by those compilers
)
)


)

$(CHANGELOG_SEP_TEXT_BUGZILLA)

$(BUGSTITLE_BUGZILLA DMD Compiler regression fixes,

$(LI $(BUGZILLA 10713): [REG2.063] ICE with typeof$(LPAREN)this.nonExistingField$(RPAREN) in method signature)
$(LI $(BUGZILLA 20562): [dmd] Memory allocation failed $(LPAREN)ERROR: This is a compiler bug$(RPAREN))
$(LI $(BUGZILLA 20686): failed static assert using a combination of __traits and unfinished type)
$(LI $(BUGZILLA 20730): [REG 2.091] __traits$(LPAREN)compiles$(RPAREN) fails if any ungagged errors occurred in compilation)
)
$(BUGSTITLE_BUGZILLA DMD Compiler bug fixes,

$(LI $(BUGZILLA 4101): [tdpl] DMD doesn't give error when goto skips initialization)
$(LI $(BUGZILLA 4174): Template interface functions not allowed, making operator overloads difficult)
$(LI $(BUGZILLA 9662): Implement RDMD test suite)
$(LI $(BUGZILLA 10257): .tupleof loses protection information upon iteration)
$(LI $(BUGZILLA 10370): ICE on invalid imports when module is used as package)
$(LI $(BUGZILLA 10386): Package import feature breaks with static libraries)
$(LI $(BUGZILLA 10574): "auto ref" fails to match when IFTI succeeds $(LPAREN)strip to level const$(RPAREN))
$(LI $(BUGZILLA 10587): __traits$(LPAREN)getAttributes$(RPAREN) doesn't work on incomplete templated types)
$(LI $(BUGZILLA 10603): Refused pure attribute on the left for function pointer argument)
$(LI $(BUGZILLA 10639): Win64: wrong optimizer codegen with struct literal with complex fields)
$(LI $(BUGZILLA 10699): override inconsistently allowed for abstract functions)
$(LI $(BUGZILLA 16643): CTFE internal error with null)
$(LI $(BUGZILLA 17503): is-expression pattern in static if matches too many types)
$(LI $(BUGZILLA 20587): _rt_loadLibrary symbol not found)
$(LI $(BUGZILLA 20603): 'cannot use non-constant CTFE pointer in an initializer' in recursive structure with overlap)
$(LI $(BUGZILLA 20610): const in a .tupleof loop is ignored)
$(LI $(BUGZILLA 20621): Since DMD 2.087.0: 32 Bit Linux now uses XMM registers: SIGILL, Illegal instruction on intel Pentium III)
$(LI $(BUGZILLA 20688): Wrong code when linking to C complex number functions)
$(LI $(BUGZILLA 20691): Converting scope static array to scope dynamic array should be error)
$(LI $(BUGZILLA 20812): _d_assocarrayliteralTX segfault assigning a shared associative array an AA literal)
$(LI $(BUGZILLA 20831): __traits$(LPAREN)getAttributes$(RPAREN) failes to compile when used on a parameter with no name)
$(LI $(BUGZILLA 20912): Compiler incorrectly lists non-matching overloads as matching in diagnostic)
$(LI $(BUGZILLA 21020): named import in with block masks local symbol)
$(LI $(BUGZILLA 21995): Struct with size uint.max or greater causes ICE)
$(LI $(BUGZILLA 23131): With -vasm all the X87 instructions are printed wrong.)
$(LI $(BUGZILLA 23294): [dip1000] parameter to parameter assignment leads to incorrect scope inference)
$(LI $(BUGZILLA 23830): Azure failure for OMF: Module name not printed before struct symbol)
$(LI $(BUGZILLA 23841): isZeroInit does not take into account unions)
$(LI $(BUGZILLA 24153): Inliner breaks -betterC by requiring TypeInfo)
$(LI $(BUGZILLA 24375): ImportC: .di generator outputs C expression with `->` operator)
$(LI $(BUGZILLA 24447): ImportC: extern symbols cannot have initializers)
$(LI $(BUGZILLA 24651): Bitfield layout wrong for 48-bit field on 32-bit Linux)
$(LI $(BUGZILLA 24663): dip1000 doesn't check slice expression implicitly converted to static array)
$(LI $(BUGZILLA 24669): ImportC: C files are not compiled with '-i' flag)
$(LI $(BUGZILLA 24670): importC: .di generation does not place parentheses around const struct return types)
$(LI $(BUGZILLA 24694): [DIP1000] can escape stack pointer through struct.class.field)
$(LI $(BUGZILLA 24701): No error produced from casted noreturn variable)
$(LI $(BUGZILLA 24705): Arguments of synchronized method are unintentionally treated as shared with -preview=nosharedaccess)
$(LI $(BUGZILLA 24706): Missing errors for first operand of comma expression)
$(LI $(BUGZILLA 24707): error message has bad parameter attribute order)
$(LI $(BUGZILLA 24733): ImportC: `#pragma pack$(LPAREN)pop$(RPAREN)` restores wrong alignment)
$(LI $(BUGZILLA 24748): DMD can't output object files with fully qualified name, making -od overwirte each other file)
$(LI $(BUGZILLA 24762):  @nogc false positive error)
$(LI $(BUGZILLA 24776): Struct with anonymous union has wrong isZeroInit)
$(LI $(BUGZILLA 24803): __traits$(LPAREN)location$(RPAREN) is inconsistent with modules)
$(LI $(BUGZILLA 24807): Error message missing parens for template instance)
$(LI $(BUGZILLA 24819): Optimizer changes result of float calculations on 32-bit)
$(LI $(BUGZILLA 24822): When passing a non-POD argument to an rvalue parameter, an unnecessary blit is done)
$(LI $(BUGZILLA 24830): separate compilation + circular deps + templated opCmp = missing symbols)
$(LI $(BUGZILLA 24836): struct return by hidden struct arg does not need copy to become an rvalue)
$(LI $(BUGZILLA 24845): Compiler error when trying to assign to an AA value of an enum instance)
$(LI $(BUGZILLA 24848): bad parser diagnostic for a partial MulExp)
$(LI $(BUGZILLA 24855): VRP fails to prevent overflow after division)
$(LI $(BUGZILLA 24861): Vestige of 16 bit code being accidentally generated)
$(LI $(BUGZILLA 24871): DDoc strips indent in triple slash comments)
$(LI $(BUGZILLA 24883): Speculative template overload error escapes with `-preview=rvaluerefparam`)
$(LI $(BUGZILLA 24891): Two scope attributes emitted as part of .di generation)
)
$(BUGSTITLE_BUGZILLA DMD Compiler enhancements,

$(LI $(BUGZILLA 9811): Add static code analyzing $(LPAREN)i.e. PVS-Studio-like diagnostic$(RPAREN))
$(LI $(BUGZILLA 9997): Missed misspell suggestions for UFCS)
$(LI $(BUGZILLA 10023): Add rtInfo $(LPAREN)or equivalent$(RPAREN) to ModuleInfo)
$(LI $(BUGZILLA 18235): Group logically similar tests into the same module in the D2 testsuite)
$(LI $(BUGZILLA 20516): [D 2.0 FAQ])
$(LI $(BUGZILLA 20614): CTFE supports typeid$(LPAREN)stuff$(RPAREN).name but not classinfo.name)
$(LI $(BUGZILLA 20888): std.range.Cycle does not compose with `const`)
$(LI $(BUGZILLA 20960):  -profile=gc does not track class objects allocated with new)
$(LI $(BUGZILLA 20982): Add a pragma to suppress deprecation messages)
$(LI $(BUGZILLA 21564): Allow assignment syntax for instantiating mixin templates)
$(LI $(BUGZILLA 23449): spellchecker should suggest corrections for pointer members)
$(LI $(BUGZILLA 23812): ImportC: allow adding function attributes to imported C functions)
$(LI $(BUGZILLA 24639): ImportC: defines of negative constants not detected for enum conversion)
$(LI $(BUGZILLA 24645): Hidden static assert error messages if more than 20 errors)
$(LI $(BUGZILLA 24738): Import core.interpolation suggestion)
$(LI $(BUGZILLA 24745): Better error message when creating an associative array with the wrong syntax)
$(LI $(BUGZILLA 24749): A clause consisting only of "throw" should be the unlikely path)
)
$(BUGSTITLE_BUGZILLA Phobos bug fixes,

$(LI $(BUGZILLA 64): Unhandled errors should go to stderr)
$(LI $(BUGZILLA 10581): Undefined identifier "std.uni.isWhite" when passing string lambda to std.algorithm.filter)
$(LI $(BUGZILLA 10607): DirEntry has no constructor)
$(LI $(BUGZILLA 10647): AutoImplement should implement overridden member functions with 'override' attributes)
$(LI $(BUGZILLA 10680): BigInt uses deprecated std.traits.unsigned)
$(LI $(BUGZILLA 14138): std.parallelism.task breaks @safety)
$(LI $(BUGZILLA 15315): can break immutable with std.algorithm.move)
$(LI $(BUGZILLA 20870): std.outbuffer.printf is trusted)
$(LI $(BUGZILLA 20872): std.array.assocArray trusts user-provided 'front' for values)
$(LI $(BUGZILLA 20929): std.experimental.allocator.expandArray's range-based overload fails to instantiate for char and wchar arrays.)
$(LI $(BUGZILLA 23300): std.array : array wrongly propagates scopeness of source)
$(LI $(BUGZILLA 24667): goo.gl is going away)
$(LI $(BUGZILLA 24685): std.stdio.File.rawRead allows reading raw pointers from files in @safe code)
$(LI $(BUGZILLA 24704): The error message for DateTime.fromISOExtString says that valid ISO extended strings that it does not support are invalid ISO extended strings)
$(LI $(BUGZILLA 24715): std/process: Default to libc `closefrom` in spawnProcessPosix)
$(LI $(BUGZILLA 24773): Stable sort$(LPAREN)$(RPAREN) invokes the destructor on uninitialized elements)
$(LI $(BUGZILLA 24801): `RefRange` doesnâ€™t work if range primitives are not `const`)
$(LI $(BUGZILLA 24809): In some cases, stable sort assigns to unininitialized elements)
$(LI $(BUGZILLA 24818): Tag of a single-type SumType wastes space)
)
$(BUGSTITLE_BUGZILLA Phobos enhancements,

$(LI $(BUGZILLA 10538): std.typecons.wrap should consider opDispatch)
$(LI $(BUGZILLA 17214): std.array.Appender has an unnecessary indirection)
$(LI $(BUGZILLA 17479): Public constructor for std.process.Pid)
$(LI $(BUGZILLA 20330): json toString with outputrange)
$(LI $(BUGZILLA 20889): Support construction of std.bigint.BigInt from a sign and a byte-array magnitude)
$(LI $(BUGZILLA 21045): std.getopt: Support blank as separator of multiple values)
$(LI $(BUGZILLA 22293): Nullable should define opCast!bool)
$(LI $(BUGZILLA 24524): Very slow process fork if RLIMIT_NOFILE is too high)
$(LI $(BUGZILLA 24698): Appender needs to expose readonly property 'size_t length' without using 'data' property)
$(LI $(BUGZILLA 24823): std.json: Allow optionally preserving the order of fields in JSON objects)
$(LI $(BUGZILLA 24851): Some members of CustomFloat can have const this)
$(LI $(BUGZILLA 24875): std.traits.isAggregateType does not consider enums of aggregate types to be aggregate types)
)
$(BUGSTITLE_BUGZILLA Druntime bug fixes,

$(LI $(BUGZILLA 10380): [AA] Wrong code using associative array as key type in associative array)
$(LI $(BUGZILLA 20763): checkaction=context does not format pointers)
$(LI $(BUGZILLA 24660): atomic_wchar_t has wrong size on Posix)
$(LI $(BUGZILLA 24661): wctype_t and wctrans_t are platform-dependent)
$(LI $(BUGZILLA 24835): hasElaborateAssign is true for structs where opAssign is disabled if a member variable has elaborate assignment)
$(LI $(BUGZILLA 24864): hasElaborateDestructor incorrectly true for structs with anonymous unions)
)
$(BUGSTITLE_BUGZILLA Druntime enhancements,

$(LI $(BUGZILLA 17416): SocketOption.REUSEPORT not available on linux)
$(LI $(BUGZILLA 19369): core.sys.posix.setjmp lacks support for Darwin)
$(LI $(BUGZILLA 20567): GC should not start threads for parallel marking in simple programs)
)
$(BUGSTITLE_BUGZILLA dlang.org bug fixes,

$(LI $(BUGZILLA 10565): Level-5 titles are missing in Language reference)
$(LI $(BUGZILLA 10605): Lambda grammar is not sufficient)
$(LI $(BUGZILLA 14945): unions are missing from the ABI page)
$(LI $(BUGZILLA 20601): [Oh No! Page Not Found])
$(LI $(BUGZILLA 24680): [dip1000] final auto class method infers scope but no return)
$(LI $(BUGZILLA 24732): FAQ article is out of date on calling printf)
)
$(BUGSTITLE_BUGZILLA dlang.org enhancements,

$(LI $(BUGZILLA 19348): Struct casts should be better documented.)
$(LI $(BUGZILLA 24659): Memory safe D page lacks information on return ref)
$(LI $(BUGZILLA 24868): Undocumented cast from struct to static array)
$(LI $(BUGZILLA 24876): Undocumented cast from slice to static array)
$(LI $(BUGZILLA 24890): spec/arrays.dd should mention comparison and warn about dangling .ptr)
)
$(BUGSTITLE_GITHUB DMD Compiler bug fixes,

$(LI $(DMDGITHUB 17214): Missing O_NOFOLLOW enum on macOS)
$(LI $(DMDGITHUB 17479): Incorrect definition of GetMessageExtraInfo)
$(LI $(DMDGITHUB 17503): Associative Arrays improperly register a GC-allocated TypeInfo for element cleanup)
$(LI $(DMDGITHUB 18235): Add offending member to "no size because of forward reference" error)
$(LI $(DMDGITHUB 19369): getcwd is deprecated for Windows - the ISO C++ conformant _getcwd should be used instead)
$(LI $(DMDGITHUB 20330): subtracting pointers with different types is both deprecated and an error)
$(LI $(DMDGITHUB 20516): ImportC: undefined identifier `_Float16`)
$(LI $(DMDGITHUB 20562): returning __rvalue should move-construct the NRVO value)
$(LI $(DMDGITHUB 20567): returning the result of a constructor should be NRVO)
$(LI $(DMDGITHUB 20587): Add `align$(LPAREN)default$(RPAREN)`)
$(LI $(DMDGITHUB 20601): hasIndirections does not handle static arrays of length 0 correctly)
$(LI $(DMDGITHUB 20603): hasIndirections does not handle enums correctly)
$(LI $(DMDGITHUB 20610): aliasing for fields does not work)
$(LI $(DMDGITHUB 20614): Add __traits$(LPAREN)hasMoveConstructor, type$(RPAREN))
$(LI $(DMDGITHUB 20621): Comparing addresses of rvalue reference parameters not correct)
$(LI $(DMDGITHUB 20686): Generated constructors should infer @nogc, nothrow and infer attributes)
$(LI $(DMDGITHUB 20688): SO_REUSEPORT is not defined for some linux targets)
$(LI $(DMDGITHUB 20691): SO_REUSEPORT is not defined for Solaris)
$(LI $(DMDGITHUB 20730): runnable/test23514.d test reports different AST between 32bit and 64bit)
$(LI $(DMDGITHUB 20763): Inconsistent handling of type + value in typeof expressions)
$(LI $(DMDGITHUB 20812): hasIndirections doesn't take qualifiers into account with void)
$(LI $(DMDGITHUB 20831): Mangle conflict after ImportC statement expression gets expanded from macro)
$(LI $(DMDGITHUB 20888): Compiler spits out implicit conversion technobabble when a return statement doesn't match the return type of a function)
$(LI $(DMDGITHUB 20889): ImportC: Usage of `typedef` types decays to original type.)
$(LI $(DMDGITHUB 20912): ImportC: DI Generator stops emitting enums before all #defines are emitted.)
$(LI $(DMDGITHUB 20929): #line directives mess up -verrors=context)
$(LI $(DMDGITHUB 20960): i = i && 1; fails at runtime)
$(LI $(DMDGITHUB 20982): Regression #20777: wrong line numbers diagnosed in inline asm)
$(LI $(DMDGITHUB 21020): [REG2.111] Indexing a *cast* AA yields no lvalue anymore)
$(LI $(DMDGITHUB 21024): Optimize x^^0, x^^1 and x^^2 expressions)
$(LI $(DMDGITHUB 21045): import __stdin causes compilation to pause while reading from stdin)
)
$(BUGSTITLE_GITHUB Phobos bug fixes,

$(LI $(PHOBOSGITHUB 9662): std.getopt: improve error message for malformed arguments)
$(LI $(PHOBOSGITHUB 9811): Writelning a tuple ignores member's toString.)
$(LI $(PHOBOSGITHUB 10023): Add "eval" to phobos)
$(LI $(PHOBOSGITHUB 10257): variadic overload of std.algorithm.searching.countUntil should return which needle was found)
$(LI $(PHOBOSGITHUB 10370): Add readfln to std.stdio)
$(LI $(PHOBOSGITHUB 10380): Memoize should handle lambdas)
$(LI $(PHOBOSGITHUB 10386): Make std.math.isIdentical work in CTFE)
$(LI $(PHOBOSGITHUB 10538): Cannot swap a std.typecons.Tuple)
$(LI $(PHOBOSGITHUB 10565): BigInt multiplication of 0 by integral $(LPAREN)non-BigInt$(RPAREN) type creates "-0" $(LPAREN)negative zero$(RPAREN))
$(LI $(PHOBOSGITHUB 10574): std.process execve depends on environ pointer not changing)
$(LI $(PHOBOSGITHUB 10581): std.logger has an ostensibly broken example and wrong docs)
$(LI $(PHOBOSGITHUB 10587): std.process.kill should fail for a terminated pid)
$(LI $(PHOBOSGITHUB 10603): `toDelegate` accepts but canâ€™t handle a templated `opCall`)
$(LI $(PHOBOSGITHUB 10605): byLine and byLineCopy should be safe)
$(LI $(PHOBOSGITHUB 10607): Structs `lines` and `ByLineCopy` cannot be usefully constructed in `@safe` code)
$(LI $(PHOBOSGITHUB 10639): Memory corruption when calling std.process exec functions)
$(LI $(PHOBOSGITHUB 10647): sumtype: canMatch fails with handler that returns non-copyable type by ref)
$(LI $(PHOBOSGITHUB 10680): [REG2.111] std.getopt doesn't accept `const$(LPAREN)string$(RPAREN)[]` anymore)
$(LI $(PHOBOSGITHUB 10713): std.format string positions affect all further format specifiers)
)
$(BUGSTITLE_GITHUB dlang.org bug fixes,

$(LI $(DLANGORGGITHUB 4101): grammar allows missing function body for AutoFuncDeclaration)
$(LI $(DLANGORGGITHUB 4174): Invalid C enum in ImportC spec example)
)
)
$(D_CONTRIBUTORS_HEADER 78)
$(D_CONTRIBUTORS
    $(D_CONTRIBUTOR 0-v-0)
    $(D_CONTRIBUTOR Adam Wilson)
    $(D_CONTRIBUTOR Alexander Heistermann)
    $(D_CONTRIBUTOR Amaury)
    $(D_CONTRIBUTOR Anca Maxim)
    $(D_CONTRIBUTOR Andrei Horodniceanu)
    $(D_CONTRIBUTOR Andrei Rusanescu)
    $(D_CONTRIBUTOR Andrey Penechko)
    $(D_CONTRIBUTOR Anita Hammer)
    $(D_CONTRIBUTOR Artha)
    $(D_CONTRIBUTOR Ate Eskola)
    $(D_CONTRIBUTOR bangbangsheshotmedown)
    $(D_CONTRIBUTOR Chibisi Chima-Okereke)
    $(D_CONTRIBUTOR Cyrodwd)
    $(D_CONTRIBUTOR Dawson Frakes)
    $(D_CONTRIBUTOR Denis Feklushkin)
    $(D_CONTRIBUTOR Dennis Korpel)
    $(D_CONTRIBUTOR Dennis O.)
    $(D_CONTRIBUTOR dhawal543)
    $(D_CONTRIBUTOR Elias Batek)
    $(D_CONTRIBUTOR Emmanuel Ferdman)
    $(D_CONTRIBUTOR Fares A. Bakhit)
    $(D_CONTRIBUTOR Feldwor)
    $(D_CONTRIBUTOR Georgy Markov)
    $(D_CONTRIBUTOR Iain Buclaw)
    $(D_CONTRIBUTOR Iain Sandoe)
    $(D_CONTRIBUTOR IchorDev)
    $(D_CONTRIBUTOR Ilya Yanok)
    $(D_CONTRIBUTOR Inkrementator)
    $(D_CONTRIBUTOR Jan Jurzitza)
    $(D_CONTRIBUTOR Jeremy Baxter)
    $(D_CONTRIBUTOR Johan Engelen)
    $(D_CONTRIBUTOR John Colvin)
    $(D_CONTRIBUTOR John Dougan)
    $(D_CONTRIBUTOR Jonas Meeuws)
    $(D_CONTRIBUTOR Jonathan M Davis)
    $(D_CONTRIBUTOR jordan4ibanez)
    $(D_CONTRIBUTOR JoÃ£o LourenÃ§o)
    $(D_CONTRIBUTOR Kymorphia, PBC)
    $(D_CONTRIBUTOR liushuyu)
    $(D_CONTRIBUTOR LunaTheFoxgirl)
    $(D_CONTRIBUTOR LuÃ­s Ferreira)
    $(D_CONTRIBUTOR Manu Evans)
    $(D_CONTRIBUTOR Marcelo Silva Nascimento Mancini)
    $(D_CONTRIBUTOR Martin Kinkelin)
    $(D_CONTRIBUTOR Mathias Lang)
    $(D_CONTRIBUTOR Matthew Qiu)
    $(D_CONTRIBUTOR Max Haughton)
    $(D_CONTRIBUTOR Mike)
    $(D_CONTRIBUTOR Nicholas Wilson)
    $(D_CONTRIBUTOR Nick Treleaven)
    $(D_CONTRIBUTOR NicolÃ² Monaldini)
    $(D_CONTRIBUTOR Oshlok)
    $(D_CONTRIBUTOR Paul Backus)
    $(D_CONTRIBUTOR Per NordlÃ¶w)
    $(D_CONTRIBUTOR Quirin F. Schroll)
    $(D_CONTRIBUTOR Rainer Schuetze)
    $(D_CONTRIBUTOR Razvan Nitu)
    $(D_CONTRIBUTOR Richard (Rikki) Andrew Cattermole)
    $(D_CONTRIBUTOR Robert burner Schadek)
    $(D_CONTRIBUTOR Royal Simpson Pinto)
    $(D_CONTRIBUTOR royalpinto007)
    $(D_CONTRIBUTOR Runa)
    $(D_CONTRIBUTOR ryuukk)
    $(D_CONTRIBUTOR Sebastian Wilzbach)
    $(D_CONTRIBUTOR Serg Gini)
    $(D_CONTRIBUTOR Simen KjÃ¦rÃ¥s)
    $(D_CONTRIBUTOR Steven Schveighoffer)
    $(D_CONTRIBUTOR SÃ¶nke Ludwig)
    $(D_CONTRIBUTOR Teodor Dutu)
    $(D_CONTRIBUTOR Tim Schendekehl)
    $(D_CONTRIBUTOR tynuk)
    $(D_CONTRIBUTOR Vladimir Panteleev)
    $(D_CONTRIBUTOR Vladiwostok)
    $(D_CONTRIBUTOR Walter Bright)
    $(D_CONTRIBUTOR wolframw)
    $(D_CONTRIBUTOR Xin Wang)
)
$(D_CONTRIBUTORS_FOOTER)
$(CHANGELOG_NAV_INJECT)

Macros:
    VER=2.111.0
    TITLE=Change Log: $(VER)
